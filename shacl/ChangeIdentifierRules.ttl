@prefix aircraft:     <http://example.org/aircraft/> .
@prefix category:     <http://example.org/category/> .
@prefix manufacturer: <http://example.org/manufacturer/> .
@prefix model:        <http://example.org/model/> .
@prefix operator:     <http://example.org/operator/> .
@prefix owner:        <http://example.org/owner/> .
@prefix time:         <http://example.org/time/> .
@prefix position:     <http://example.org/position/> .
@prefix rdf:          <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix voc:          <http://example.org/vocabulary#> .
@prefix sh:           <http://www.w3.org/ns/shacl#> .
@prefix xsd:          <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:         <http://www.w3.org/2000/01/rdf-schema#>.

voc:ChangeIdentifierShape
    a sh:NodeShape ;
    sh:targetClass voc:Position ;
    sh:rule [
          a sh:SPARQLRule ;
          sh:construct """
                prefix rdfs:     <http://www.w3.org/2000/01/rdf-schema#>
                prefix aircraft: <http://example.org/aircraft/>
                prefix position: <http://example.org/position/>
                prefix rdf:      <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                prefix time:     <http://example.org/time/>
                prefix voc:      <http://example.org/vocabulary#>
                prefix xsd:      <http://www.w3.org/2001/XMLSchema#>
                prefix math:     <http://www.w3.org/2005/xpath-functions/math#>

            CONSTRUCT {
                $this voc:changed true.
                #$this voc:oldPosition ?oldPos.
                $this voc:deltaVelocity ?deltaVelocity
            }
            WHERE {
                $this voc:hasTime ?time_object.
                $this voc:onGround ?onGround.
                $this voc:hasAircraft ?aircraft.
                $this voc:velocity ?velocity.
                ?time_object voc:time ?time.

            {
            #Query for the Position before the current Position saved on Variable ?oldPos
                SELECT ?oldPos ?oldTime ?oldAircraft ?oldVelocity
                    WHERE{
                    ?oldPos a voc:Position.
                    ?oldPos voc:hasTime ?oldTime_object.
                    ?oldTime_object voc:time ?oldTime.
                    ?oldPos voc:hasAircraft ?oldAircraft.
                    ?oldPos voc:velocity ?oldVelocity.
                    }
            }
                FILTER(?onGround = false &&
                ?oldAircraft = ?aircraft &&
                ?oldTime < ?time &&
                ?deltaVelocity < ?threshold).


            BIND(abs((?velocity-?oldVelocity)) AS ?deltaVelocity). #Delta of velocities
            }
            """ ;
      ] ;
.